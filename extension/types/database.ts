import { DBSchema } from "idb";
import { ContextType } from "./context";

// Define the database schema
export interface UrmindDB extends DBSchema {
  context_categories: {
    key: string; // slug
    value: {
      slug: string; // unique identifier
      label: string; // human-readable name
      createdAt: number;
      updatedAt: number;
    };
    indexes: {
      "by-slug": string;
      "by-label": string;
      "by-created": number;
    };
  };
  contexts: {
    key: string;
    value: {
      id: string;
      fingerprint: string;
      contentFingerprint: string;
      categorySlug: string; // reference to context_categories.slug
      type: ContextType;
      title: string; // generated by llm
      description: string; // generated by llm
      summary: string; // summarized content for display

      // TODO!: rawContent is not used anywhere, we should remove it
      rawContent?: string; // original unprocessed content for embeddings
      // during page metadata extraction (only for web pages)
      og: {
        title: string | null;
        description: string | null;
        image: string | null;
        favicon: string | null;
      } | null;
      highlightText: string; // Legacy field for backwards compatibility
      highlightElements: Array<{
        xpath: string;
        position: { x: number; y: number; width: number; height: number };
      }>; // New field: Array of DOM elements with XPath and position for precise highlighting
      url: string | null; // clean url
      fullUrl: string | null; // full raw url
      image: string | null;
      assetId?: string; // reference to assets table
      // favicon: string | null;
      createdAt: number;
      updatedAt: number;
    };
    indexes: {
      "by-id": string;
      "by-type": string;
      "by-content-fingerprint": string;
      "by-created": number;
      "by-fingerprint": string;
      "by-category-slug": string;
    };
  };
  embeddings: {
    key: string;
    value: {
      id: string;
      type: "parent" | "chunk";
      vector: number[];
      rawContent: string;
      metadata: Record<string, any>;
    };
    indexes: {
      "by-id": string;
      "by-metadata": string;
    };
  };
  conversations: {
    key: string;
    value: {
      id: string;
      messages: Array<{
        id: string;
        role: "assistant" | "user";

        // V1.0
        // parts: Array<{
        //   type: string;
        //   text?: string;
        //   output?: Record<string, any>;
        //   toolId?: string;
        //   content?: string;
        //   state?: string;
        //   input?: Record<string, any>;
        // }>;

        // V2.0
        content: string;
        contextIds: string[];
      }>;
      createdAt: number;
      updatedAt: number;
    };
    indexes: {
      "by-id": string;
      "by-created": number;
    };
  };
  assets: {
    key: string;
    value: {
      id: string;
      type: "image" | "video" | "audio" | "document";
      source: "local-upload" | "web-page";
      filename: string;
      mimeType: string;
      size: number;
      dataUrl: string; // base64 data URL (e.g., "data:image/png;base64,...")
      url?: string; // external URL for web-sourced assets
      metadata: {
        width?: number;
        height?: number;
        duration?: number; // for video/audio
        [key: string]: any;
      };
      createdAt: number;
      updatedAt: number;
    };
    indexes: {
      "by-id": string;
      "by-type": string;
      "by-source": string;
      "by-created": number;
    };
  };
}
